#!/bin/bash

# Dotter: 
# instanced configuration and "package management" * Curently unimplemented.

#	TODO: Add basic list of available commands
#	
#	--debug			debug mode (A more verbose verbose mode)
#	-v					verbose mode 
#	-d					dry run mode

# Current features:
#		installation of chosen instances
#		on the fly templating for different instance types
#		hot reloading templated files via parenter
#		saving and editing configs, with support for github
#		adding configs to specific instance
#
#	Planned features:
#		per-instance package management
#		...

#	Is designed work in the following structure:

# Configuration home
	#	global
	#	instance1
		#	global
		#	instance1
			#	global
		#	instance2
			#	global
			#	...
		#	...

	#	instance2
		#	global
		#	instance1
			#	global
			#	...
		#	...
	# ...

#	All instances must contain a global, but do not need to contain child instances
#	A global must NOT have an instance, it will not be detected.
#	In a global there can be normally any file, as they will be managed later in the ~/dots/ direcory
#	Generally there is a /user/ file, containing anything that a user would have in the main file, such as .bashrc, .vimrc, .config etc. 
#	There can be other folders or files as well, such as /bin/ for binaries specific to that instance.

################
# Installation #
################

# From the directory containing your configurations:
# Run 'dotter install'

########
# Help #
########

# Run:
# 'dotter help'
# OR
# 'dotter'

####################
# Global Variables #
####################

verbose_mode=n
debug_mode=n
dry_run=n
self_name="$(basename $0)"
origin="$(pwd)"
dotconf=~/dots/".dotter.conf"


####################
# Option functions #
####################

RED="\e[31m"
GREEN="\e[32m"
ENDCOLOR="\e[0m"
VERBOSE_TEXT="${GREEN} [vecho]${ENDCOLOR}"
DEBUG_TEXT="${RED} [debug]${ENDCOLOR}"

# Verbose echo
vecho () {
	if [[ "$verbose_mode" == "y" ]] || [[ "$debug_mode" == "y" ]]; then
		echo -e "$VERBOSE_TEXT $@" >&2
	fi
}

# Debug echo
decho () {
	if [[ "$debug_mode" == "y" ]]; then
		echo -e "$DEBUG_TEXT $@"	>&2
	fi
}

# set option 'set +x' if debug mode is on
dset () {
	if [[ "$debug_mode" == "y" ]]; then
		PS4='\033[0;33m+(${BASH_SOURCE}:${LINENO}):\033[0m ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
		set -x
	fi
}
# set option 'set +x' to unset dset
dunset () {
	set +x
	PS4=''
}

##################
# Help functions #
##################

# Usage: incorrect arg as $1
base_opt_usage="$self_name [-v#rbose] [-d#yrun] [-D#bug] ..."
_help_base_opt () {
	echo -e "Invalid usage of '$1'\nUsage:\n	$base_opt_usage"
}

_help_base_arg () {
	echo -e "Invalid argument: '$1'\nUsage:\n	"
}

# TODO: Write help.....
_help () {
	echo "help me"
}

###########
# Options #
###########

# Get standard options
while getopts "vdD" opt; do
	case $opt in
		v) verbose_mode=y ; echo "verbose mode on" ;;
		d) dry_run=y ; echo "dry run mode on" ;;
		D) debug_mode=y ; echo "debug mode on" ;;
		*) _help_base_opt "$opt" ; 
			exit 1 ;;
	esac
	shift $((OPTIND - 1))
done


dunset
dset

vecho "Leftover options and arguments: $@"

# All comments are written when programming so I can remember the steps I was following, otherwise my ram limited brain will forget what I was doing.

#	##################
#	# Base Functions #
#	##################

# Functions that cannot be called from the tty, rather are relied upon by other functions.


# vecho : verbose echo


# wormer: function to go through all files and directories in the instance home. 
# Arguments: Directory you want to start worming from; origin directory
wormer () {
	local origin_directory=$1
	local chosen_instances=()

	# Defining function inside here to be able to enclose a recursive function in a single function for conciseness
	# Goes through each directory in the directory given, checks if directory has more than one folder.
	# If has more than one folder, then run the worm again with that directory as the argument
	worm () {

		local working_directory="$1"

		# Create local variables for cleanliness
		local directory=
		local cont=false
		local found_directories=($(find "$working_directory" -mindepth 1 -maxdepth 1 -type d))

		vecho "found_directories: $found_directories"

		# Check if there is more than one instance within the instance (Doesn't check if instance contains global or not)
		# If so end stack and append to chosen_instances
		if [[ ${#found_directories[@]} == 1 ]]; then

			vecho "End of tail; closing stack and appending directories." >&2

			# Readlink cleans the directory string of extra slashes
			directories+=("$found_directories")

		# Otherwise create new worms for each directory found
		else
			for directory in "${found_directories[@]}"; do
				directory_basename="$(basename $directory)"
				
				vecho "Found: $directory" >&2
				if [[ ! "$directory_basename" == "global" ]]; then
					echo "Found instance: $directory_basename" >&2
					read -p "Would you like to add instance $directory_basename? (y/n): " cont #nue
					if [[ "$cont" == "y" ]]; then
						vecho "worming $directory" >&2
						worm "$directory"
					else
						vecho "Skipping $directory_basename..." >&2
						continue
					fi
				else 
					vecho "Automatically adding global..." >&2
					directories+=("$directory")
				fi
			done
		fi
		return 0
	}

	# Start the initial worming!!
	worm "$origin_directory"

	# Not sure if this should be in quotes or not.
	# echo out the array of dictionaries
	echo ${directories[@]}
	return 0
}

# A function to link all contents within each instance to its respective dots. links will be forced? or ask to replace a link when it occurs
# Gets file structure and creates directories to ~/dots when needed
# Afterwards goes through every file in the directory and links it to its respective area in dots.
linkdir () {
	# Usage: link_global directory_of_global
	local source_directory="$1"
	local destination=~/dots
	local relative_path=
	local destination_file=

	vecho "Source_dir = $source_directory"

	if [[ ! $dry_run == true ]]; then
		mkdir -p "$destination"
	fi	

	vecho "made directory $destination"

	find "$source_directory" -type f | while read -r FILE; do
		relative_path="${FILE#$source_directory/}"	
		dest_file="$destination/$relative_path"

		if [[ ! "$dry_run" == true ]]; then
			mkdir -p "$(dirname "$dest_file")"
		fi

		vecho "made directory $(dirname "$dest_file")"

		if [[ "$(basename "$FILE")" == ".dot" ]]; then
			dot_add "$dest_file" "$FILE"
		fi

		if [[ ! "$dry_run" == true ]]; then
			ln -f "$(realpath "$FILE")" "$dest_file"
		fi
		echo "linked $FILE -> $dest_file"
	done
	echo "Symlinked created successfully from $source_directory"
}

# Check and create dotconf with proper json syntax
create_dot_conf () {
	# Check if .dotter.conf exists and contains "{}"
	if [ -f "$dotconf" ]; then
		if [ ! -s "$dotconf" ]; then
			echo "'$dotconf' was empty" >&2
			echo "{}" > "$dotconf"
		fi
	else
		echo "'$dotconf' didn't exist" >&2
		echo "{}" > "$dotconf"
	fi
}

# Adds contents of .dot to .dotter.conf
# Args: full location of .dot
dot_add () {
	# Check if .dotter.conf exists and contains "{}"
	create_dot_conf
	# Arguments: dot_add full_destination full_file_location
	local full_destination=$1
	local full_file_location=$2
	

	vecho -e "\nfound .dot \n\n"
	local tempjson=$(mktemp)
	local loc="$(dirname "$full_destination")"
	local loc="${loc#~/dots/}"  # Remove the leading ~/dots/
	# Use jq to update .dotter.conf
	
	vecho "Full destination = $full_destination"
	vecho "Full file location = $full_file_location"
	vecho "location = $loc"

	jq --argjson dot "$(jq '.' $full_file_location)" --arg loc "$loc" --arg origin "$full_file_location" \
		'.dots[$loc] = $dot | .dots[$loc].origin = $origin' "$dotconf" > $tempjson && mv $tempjson $dotconf 
}

# Kill parenter daemons and child processes
kill_parents () {
	if pgrep parenter >/dev/null 2>&1; then
		vecho "Killing all parenter processes"
		local parents_gpid=($(ps x -o  "%r %c" | grep parenter -m 1))
		kill -- -"$parents_gpid"
	else
		echo "There are no parents with daemon attached"
	fi
}

#############
# Functions #
#############

# Add binary to specified instance
# TODO: Change the selection process to be another function
# TODO: Allow for adding binaries which are not currently in the binary folder
# TODO: Allow adding binaries from /bin or /usr/bin folder. (Or force users not to.)
#
# Args is just the rest of the files
dotsdir=~/dots/
confdir=~/.config/
userdir=~/

dotter_add_bin () {

	vecho "dotsdir = "$dotsdir
	vecho "confdir = "$confdir
	# Find the origin location of said file from dots
	local files=($@)
	# for each file, ask the user which instance to install it to
	# Do this by parsing the chosen instances into nice big array
	local instances=()

	# add another instance file for printing which has cleaner folders
	local clean_instances=()
	
	# Parse $dotconf for instances using process substitution otherwise instances doesn't get updated....
	# TODO: Add another clause to dotter conf which names where the sources is (In terms the .git location)
	# Temporary solution is just to hard code it
	local git_location=~/github/linux/dotfiles

	while read -r instance; do
		vecho "Instance = $instance"
		instances+=("${instance}")
		clean_instances+=("${instance#$git_location}")
	done< <(jq -r '.instances[]' "$dotconf")

	vecho "instances = ${instances[@]}"
	vecho "clean instances = ${clean_instances[@]}"
	
	
	# TODO: Make an option that allows sending all the files to the first chosen instance
	
	# Ask for each file specifically; maybe the user wants to send each file to separate locations
	for file in "${files[@]}"; do
		location="$(pwd)/$file"
		vecho "current location: $location"

		# Don't need to parse because bin is always in bin.

		vecho "File = $file\nlocation = $(pwd)/$file"
		#
		# Ask the user which instance do they want to install to
		#
		local chosen_instance
		echo -e "\n\n	Current file: $file"

		while true; do
			echo "Please select instance to save '$file' to."
		 	echo "available instances: "
		 	for i in "${!clean_instances[@]}"; do
		 		echo "	$i) ${clean_instances[$i]}"
		 	done
		 	read -p "Please enter instance number (0-$((${#instances[@]} - 1))): " instance_number
		 	
		 	# checking if instance chosen is valid
		 	if [[ "$instance_number" =~ ^[0-9]+$ ]] && (( instance_number >= 0 && instance_number < ${#instances[@]} )); then
		 		vecho "$instance_number is a valid instance number"
		 		break
		 	else
		 		echo "$instance_number is NOT a valid instance number"
		 	fi
		 done
		# Now make the bin directory for that instance
		chosen_location="${instances[$instance_number]}/bin"
		vecho "Conducting: mkdir -p $chosen_location"
		vecho "Conducting: mv $file $chosen_location"
		vecho "Conducting: ln $chosen_location/$file $file"

		if [ ! $dry_run = "y" ]; then
			mkdir -p "$chosen_location"
			mv "$file" "$chosen_location"
			ln "$chosen_location/$file" "$file"
		else
			echo "Dry run was on, so nothing was changed."
		fi

	done

	echo "Complete!"
	
}

# Add specified configuration file to specified instance
dotter_add_config () {

	vecho "dotsdir = "$dotsdir
	vecho "confdir = "$confdir
	# Find the origin location of said file from dots
	local files=($@)
	# for each file, ask the user which instance to install it to
	# Do this by parsing the chosen instances into nice big array
	local instances=()

	# add another instance file for printing which has cleaner folders
	local clean_instances=()
	
	# Parse $dotconf for instances using process substitution otherwise instances doesn't get updated....
	# TODO: Add another clause to dotter conf which names where the sources is (In terms the .git location)
	# Temporary solution is just to hard code it
	local git_location=~/github/linux/dotfiles

	while read -r instance; do
		vecho "Instance = $instance"
		instances+=("${instance}")
		clean_instances+=("${instance#$git_location}")
	done< <(jq -r '.instances[]' "$dotconf")

	vecho "instances = ${instances[@]}"
	vecho "clean instances = ${clean_instances[@]}"
	
	
	# TODO: Make an option that allows sending all the files to the first chosen instance
	
	# Ask for each file specifically; maybe the user wants to send each file to separate locations
	for file in "${files[@]}"; do
		location="$(pwd)/$file"
		# Do a global parse of home to get actual location
		# What if its a bin file that wants to be moved?
		# Typically bin files are not moved from the dots folder. 
		# Leave that to another command 'dotter add bins'
		parsed_location="user/${location#$userdir}"
		parsed_dir="$(dirname $parsed_location)"
		# Check if parsed location actually parsed. If not exit with error
		if [ $parsed_location = $location ]; then
			echo "Error: Failed to parse $location; file is not in home/user directory"
			exit 1
		fi
		vecho -e "File = $file\nlocation = $(pwd)/$file"
		vecho -e "Parsed location = $parsed_location"
		vecho -e "Parsed dir = $parsed_dir"
		
		# Ask the user which instance do they want to install to
		local chosen_instance
		echo -e "\n\n current file: $file"

		while true; do
			echo "Please select instance to save to."
			echo "available instances: "
			for i in "${!clean_instances[@]}"; do
				echo "	$i) ${clean_instances[$i]}"
			done
			read -p "Please enter instance number (0-$((${#instances[@]} - 1))): " instance_number
			
			# checking if instance chosen is valid
			if [[ "$instance_number" =~ ^[0-9]+$ ]] && (( instance_number >= 0 && instance_number < ${#instances[@]} )); then
				echo "$instance_number is a valid instance number"
				break
			else
				echo "$instance_number is NOT a valid instance number"
			fi
		done
		# now instance has been chosen, so mkdir and move file
		final_dir="${instances[$instance_number]}/$parsed_dir"
		final_loc="$final_dir/$file"
		vecho -e "Making directory $final_dir"
		vecho -e "mkdir -p $final_dir"
		vecho -e "moving $file to $final_loc"
		vecho -e "hardlinking $final_loc to $location"

		# mv file to proper instance location
		# And then hardlink it back to its old location
		if [ $dry_run = "false" ]; then
			mkdir -p "$final_dir"
			mv "$file" "$final_loc"
			ln "$final_loc" "$file"
		else
			echo "Dry run is on"
		fi
		vecho -e "\n\n"
	done
}

# dots template - create a template file at location/pwd named dots.
# Args: (location) Otherwise uses pwd
dots_template () {
	local template="
{
	\"request\": {
	},
	\"parenter\": [
	],
	\"cmds\": [
	]
}
"
	# clean up the template
	template=$(jq . <<< $template)
	# Check if args is empty
	local location
	if [[ -z "$1" ]]; then
		location=$PWD
	else
		location="$1"
	fi
	vecho "$location"
	# if .dot already exists ask if they want to override it
	local cont
	if [[ -f $location/.dot ]]; then
		read -p "$location/.dot already exists. Override? (y/n): " cont
		if [ ! $cont = "y" ]; then
			echo "Exitting..."
			exit 0
		fi
	fi
	echo "$template" > $location/.dot
}

# Do all parent commands from dotter.conf
dotter_do_parents () {
	# get each field in .info and loop through it
	# Add option --daemon=true
	# Check if daemon option is true
	local daemon_mode=false
	echo "$@"
	for arg in "$@"; do
		echo "$arg"
		case "$arg" in
			"--daemon="*)
				daemon_mode="${arg#*=}"; echo "daemon_mode = $daemon_mode";;
		esac
	done
	# Kill all instances of parenter, if daemon mode is true to ensure that only a single instance remains
	kill_parents
	jq -r '.info | to_entries[] | .key' "$dotconf" | while read -r dot_key; do
		# Create associative array with all values
		declare -A variables=()

		vecho -e "	$dot_key \n\n\n\n"
		# Read each info and add to associative array
		# Use process substitution to avoid subshell issues
		while read -r info_entry; do
			variable_name="${info_entry%%:*}"
			variable_value="${info_entry#*: }"
			# Add catch; since if variable_name has no value then "${info_entry#*: }" will fail, so check if variable_value = info_entry
			if [ "$variable_value" = "$info_entry" ]; then
				variable_value=""
			fi
			variables["$variable_name"]="${variable_value}"

			vecho -e "variable_name = $variable_name\nvariable_value = $variable_value"

		done < <(jq -r --arg dot_key "$dot_key" '.info[$dot_key] | to_entries[] | "\(.key): \(.value)"' "$dotconf")

		# Using these values, execute all parenter entries
		parenter_entries=()
		while read -r parenter_entry; do
			# parse all variables within each parenter entry and replace with respective value from associative array
			vecho "Parenter entry = $parenter_entry"

			for key in ${!variables[@]}; do

				vecho "Attempting to swap \$$key for ${variables[$key]}"

				parenter_entry=$(sed "s/\$$key/${variables[$key]}/g" <<< $parenter_entry)

				vecho -e "Result:\n$parenter_entry\n\n"

			done

			vecho -e "Parsed parenter entry = $parenter_entry\n\n"

			# Parenter entry has been parsed; can now do parenter command BUT must move to correct directory first
			# Move to correct directory
			local correct_dir=~/dots/$dot_key

			vecho "correct dir = $correct_dir"

			(cd $correct_dir &&
				vecho "$(pwd)"
				vecho "parenter $parenter_entry"
				if [ $daemon_mode = "true" ]; then
					# Also put all outputs to a log file under the same name
					# Log the execution start
					# For the log file name try and get the first option without a dash and then parse it as log_name
					local log_name=""
					mkdir -p ~/dots/logs

					for arg in ${parenter_entry[@]}; do
						if [[ ! $arg =~ ^- ]]; then
							log_name=~/dots/logs/"$arg".log
							break
						fi
					done
					# Check if log_name is empty, if so just put a default name
					if [ -z $log_name ]; then
						log_name=~/dots/logs/"$(basename $dot_key)".log
					fi

					echo -e "\n\n$(date), entry=$parenter_entry" >> "$log_name"
					# Run parenter in the background and redirect output
					nohup parenter -d $parenter_entry >> "$log_name" 2>&1 &
				else
					parenter $parenter_entry
				fi
			)
		done < <(jq -r --arg dot_key "$dot_key" '.dots[$dot_key].parenter[]' $dotconf)
		vecho -e "\n\nFinished loop $dot_key\n\n"
	done
	vecho "do parents: Finished"
}

# Do all cmd cmds from dotter.conf
dotter_do_cmds () {
	# Go through all the possible dots in dots, read through cmds and execute them from said directory.
	jq -r '.dots | to_entries[] | .key' "$dotconf" | while read -r dot_key; do
		correct_dir=~/dots/$dot_key
		jq -r --arg dot_key "$dot_key" '.dots[$dot_key].cmds[]' $dotconf | while read -r cmd; do
			(cd $correct_dir && $cmd)
		done
	done
}

# dots update - reload dot configuration without reinstalling.
dots_update () {
	# Args: Specified dots, given the same way as in dots in the config.
	# IE: dotter dots update user/.config/eww
	local args=("$@")
	
	# Check if args is empty:
	if [[ -z "$args" ]]; then
		# Assume all dots need to updated.

		vecho "No options passed. Updating all registered dots."

		jq -r '.dots | to_entries[] | .key' "$dotconf" | while read -r dot_key; 
		do
			local origin="$(jq --arg dot_key "$dot_key" '.dots[$dot_key].origin' "$dotconf")"
			# strip origin of quotes
			origin="${origin//\"/}"
			# Also need to get full_destination dot_add
			local destination=~/dots/$dot_key/.dot

			vecho "dot_key = $dot_key" 
			vecho "origin = $origin" 
			vecho "destination = $destination"
			vecho "using dot_add with the follwing args:"
			vecho "dot_add \"$destination\" \"$origin\" "

			dot_add "$destination" "$origin"

		done
	else
		for arg in "${args[@]}"; do
			local origin="$(jq --arg arg "$arg" '.dots[$arg].origin' "$dotconf")"
			# strip origin of quotes
			origin="${origin//\"/}"
			local destination=~/dots/$arg/.dot

			vecho "origin = $origin" 
			vecho "destination = $destination"
			vecho "using dot_add with the follwing args:"
			vecho "dot_add \"$destination\" \"$origin\" "

		dot_add "$destination" "$origin"
		done
	fi

	
	return 0
}

# Do all requests specified in dotterconf
dotter_do_requests () {
	local dots=
	local tempjson=$(mktemp)

	vecho "$(jq . "$dotconf")"

	jq -r '.dots | to_entries[] | .key' "$dotconf" | while read -r dot_key; do
		vecho "Processing dot key: $dot_key"
		vecho "Dot_key from first while read: $dot_key"
		# Loop through each key-value pair in the "request" object for the current dot key
		jq -r --arg dot_key "$dot_key" '.dots[$dot_key].request | to_entries[] | "\(.key): \(.value)"' "$dotconf" | while read -r request_entry; do
			variable_name="${request_entry%%:*}"
			variable_args="${request_entry#*: }"
			variable_args=$(sed "s|%DOT_KEY%|$dot_key|g" <<< "$variable_args")
			# Don't want escaped?
			# For some reason it believes that there are speech marks around it, when there shouldn't be.
			# NOTE: Temporary solution is to remove all quotes for now. Not good but works for now.
			# TODO: Fix during rewrite
			dotter_request $variable_args </dev/tty 
			variable_value=$(dotter_request $variable_args)
			variable_value=${variable_value//\"/}

			vecho "dot_key = $dot_key"
			vecho "variable_name = $variable_name"
			vecho "variable_args = $variable_args"
			vecho "dotter_request $variable_args"
			vecho "Variable_value = $variable_value"
			vecho -e "\n"

			# check if value already existed
			if [[ -z $(jq --arg dot_key "$dot_key" --arg name "$variable_name" '.info[$dot_key][$name] //empty' $dotconf) ]]; then

				vecho "passed value existing test"

				jq --arg name "$variable_name" --arg value "$variable_value" --arg dot_key "$dot_key" '.info[$dot_key] += {$name: $value}' "$dotconf" > "$tempjson" && mv $tempjson $dotconf 
			fi
		done
	done
}

# Reload entire configuration using stored instances in .dotter.conf
dotter_reload () {

	# Save all instances in tempjson, and then completely override $dotconf 
	# Delete everything in .dotter.conf
	local tempjson="$(mktemp)"
	jq '{instances: .instances}' "$dotconf" > "$tempjson" && mv "$tempjson" "$dotconf"
	
	# Relink everything stated in instances, similar to how dotter_install does it
	# Loop through instances:
	jq -r '.instances[]' $dotconf | while read -r instance; do
		vecho "$instance"
		linkdir "$instance" 
	done
	dotter_do_requests
	dotter_do_parents
	exit 0
	
}

# Dotter install
dotter_install () {
	# TODO: Change this installer greeting
	echo -e "Dots installer - Dotter.
	assuming installation because no options passed.
	run 'dotter --help' to see options\n"

	read -p "Proceed with dots installation? (y/n): " permissions

	if [ $permissions = "y" ]; then
		echo "Continuing..."
		directories=$(wormer $origin)
		echo -e "\n"

		vecho -e "Chosen directories: ${directories[@]} \n"

		echo "instances chosen: "
		for dir in ${directories[@]}; do
			echo "dotfiles${dir#"$origin"}"
		done

		# Add chosen instances to json
		# Ensure dots folder exits by making it
		mkdir -p ~/dots
		
		# Check if .dotter.conf exists and contains "{}"
		create_dot_conf
		
		local tempjson=$(mktemp)
		local json="$(printf '%s\n' ${directories[@]} | jq -R . | jq -s .)"
		vecho "json = ${json[@]}"

		jq --argjson instances "$json" '.instances = $instances' $dotconf > $tempjson && mv $tempjson $dotconf	

		read -p "Are you sure you want to continue? (y/n): " cont
		if [ $cont = "y" ]; then
			for dir in ${directories[@]}; do
				linkdir $dir
			done
			read -p "Would you like setup the .dotter.conf file? (y/n): " setup 
			if [ $setup = "y" ]; then
				dotter_do_requests
				read -p "Would you like to template all files as requested from .dot's? (y/n): " template
				if [ $template = "y" ]; then
					dotter_do_parents
					
				fi
				echo -e "If you would like to turn on the daemon for hot reloading templates, run 'dotter do parents --daemon=true'"
			else
				echo "If you would like to setup the .dotter.conf, run 'dotter do requests'"
				echo "Exiting without setting up the .dotter.conf"
				exit 0
			fi
		else
			echo "Exiting, doing nothing"
			exit 0
		fi

		if [ $dry_run = true ]; then
			echo "dry run was on; no changes were made"
		fi

	else
		echo "Exiting, doing nothing"
		exit 0
	fi
}

# Reset config; keep all instances tho.
dotter_config_reset () {
	# Save all instances in tempjson, and then completely override $dotconf 
	# Delete everything in .dotter.conf
	local tempjson="$(mktemp)"
	jq '{instances: .instances}' "$dotconf" > "$tempjson" && mv "$tempjson" "$dotconf"

}

# Set all monitor information as well as add info to certain instances if desired
dotter_set() {
    if [[ $1 == "monitors" ]]; then
        if ! command -v wlr-randr &>/dev/null; then
            echo "Error: wlr-randr is not installed. Please install it via your package manager." >&2
            exit 1
        fi

        echo "No options were passed, setting all defaults (Monitors)"
        echo ""

        mapfile -t monitors < <(wlr-randr --json | jq -r '.[].name')
        local monitor_indexes=(${!monitors[@]})

        echo "Available monitors:"
        for i in "${!monitors[@]}"; do
            echo "$i) ${monitors[$i]}"

        done


        while true; do
					read -p "Select the main monitor index (0-$((${#monitors[@]}-1))): " main_monitor_index
            if [[ "$main_monitor_index" =~ ^[0-9]+$ ]] && (( main_monitor_index >= 0 && main_monitor_index < ${#monitors[@]} )); then
                local main_monitor_id=${monitors[$main_monitor_index]}
                local tempjson=$(mktemp)
								
								vecho "ids = ${monitors[*]}"
								vecho "indexes = ${!monitors[*]}"
								# Remember that for parenter vars have to be comma separated.
								# So changing monitors to comma separated
								IFS=","

								vecho "Setting .monitors.all ids and indexes..."
                jq --arg ids "${monitors[*]}" --arg indexes "${!monitors[*]}" \
                    '.monitors.all.ids = $ids | .monitors.all.indexes = $indexes' "$dotconf" > "$tempjson" && mv "$tempjson" "$dotconf"
                
                vecho "Setting .monitors.main's id and index..."
                jq --arg id "$main_monitor_id" --arg index "$main_monitor_index" \
                    '.monitors.main.id = $id | .monitors.main.index = $index' "$dotconf" > "$tempjson" && mv "$tempjson" "$dotconf"
                
                vecho "Setting .monitors.extra's ids and indexes..."

								monitor_extras=("${monitors[@]}")
								unset 'monitor_extras[$main_monitor_index]'

								vecho "ids = ${monitor_extras[*]}"
								vecho "indexes = ${!monitor_extras[*]}"
                
								jq --arg ids "${monitor_extras[*]}" --arg indexes "${!monitor_extras[*]}" \
									'.monitors.extra.ids = $ids | .monitors.extra.indexes = $indexes' $dotconf > $tempjson && mv $tempjson $dotconf
								unset IFS

                return 0
            else
                echo "\"$main_monitor_index\" is an invalid input. Please enter a valid index." >&2

            fi
						# Stop spamming wrong inputs
						sleep 1
        done
    
    elif [[ $1 == "info" ]]; then
        shift 1
        
        if [[ $# -eq 2 ]]; then
            local var_name="$1"
            local var_value="$2"
            local tempjson=$(mktemp)
            
            jq --arg name "$var_name" --arg value "$var_value" \
                '.info[$name] = $value' "$dotconf" > "$tempjson" && mv "$tempjson" "$dotconf"
            echo "Updated .info.$var_name = $var_value"
            return 0
        
        elif [[ $# -eq 3 ]]; then
            local location="$1"
            local var_name="$2"
            local var_value="$3"
            local tempjson=$(mktemp)
            
            jq --arg loc "$location" --arg name "$var_name" --arg value "$var_value" \
                '.info[$loc][$name] = $value' "$dotconf" > "$tempjson" && mv "$tempjson" "$dotconf"
            echo "Updated .info.$location.$var_name = $var_value"
            return 0
        
        else
            echo -e "Error: Invalid arguments.\nUsage:\n  dotter_set info (Variable_name) (Value)\n  OR\n  dotter_set info (Location) (Variable_name) (Value)" >&2
            exit 1
        fi
    
    else
        echo "Error: Invalid command. Available options: monitors, info" >&2
        exit 1
    fi
}

# Dotter setup: links config files to $(whoami)/.config via a symbolic link
# TODO: Add features for bin, boot and maybe more?
dotter_setup () {
	# Check if /dots/ has correct info.
	user_name="$(whoami)"
	home_folder=~
	local dots_dir="$(dirname $dotconf)"
	vecho "dots_dir = $dots_dir"
	shopt -s dotglob
	for dir in $dots_dir/*; do
		vecho $dir
		# Make sure that dir isn't logs
		if [ "$(basename $dir)" = "logs" ]; then
			vecho "skipping logs..."
			continue
			# also make sure it isn't .dotconf
		elif [ "$(basename $dir)" = ".dotter.conf" ]; then
			vecho "skipping .dotter.conf..."
			continue
		elif [ "$(basename $dir)" = "user" ]; then
			# Link all user files
			for userdir in $dir/*; do
				echo $userdir
				local cleandir="$(basename $userdir)"
				if [[ ! $dry_run == "true" ]]; then
					echo "dry notrunning"
					ln -sr $userdir $home_folder
				fi
				vecho "linking $userdir -> $home_folder/$cleandir"
			done
		# Just ignore anything that is not specified. Don't want to clutter the home folder.
# 		else
# 			local cleandir="$(basename $dir)"
# 			if [[ ! $dry_run == "true" ]]; then
# 				echo "dry notrunning"
# 				ln -sr $dir $home_folder
# 			fi
# 			if [ "$verbose_mode" = true ]; then
# 				echo "linking $dir -> $home_folder/$cleandir"
# 			fi
# 
# 
		fi
	done
	echo -e "For everything that is not the main config, such as bins and other settings, please link it manually"
	shopt -p dotglob
}

# Command for option: get
# TODO: Write specification for dotter_get
dotter_get () {
	# Expecting rest of arguments, $@
	# All information should be set in .dotter.conf in /home/user/dots/


	if [[ $1 == "monitors" ]]; then
		shift 1
		main_monitor=$(jq -r '.monitors.main.id // "null"' "$dotconf")
		extra_monitors=$(jq -r '.monitors.extra.ids // "null"' "$dotconf")

		if [[ "$main_monitor" == "null" || "$extra_monitors" == "null" ]]; then
			echo "Monitor values are not set up. Please run \`dotter set monitors\`."
			exit 1
		fi 
		if [[ $1 == "main" ]]; then
			shift 1
			if [[ $1 == "id" ]]; then

				jq .monitors.main.id $dotconf 

			elif [[ $1 == "index" ]];then
				
				jq .monitors.main.index $dotconf 

			elif [[ -z $1 ]]; then

				jq .monitors.main $dotconf 

			else # If wrong option
				echo -e "error: invalid input\noptions: \n	index\n	id\n	none(outputs all)"
				exit 1
			fi
		elif [[ $1 == "extra" ]]; then
			shift 1
			if [[ $1 == "ids" ]]; then
				# Because top level, output as bash array
				
				jq -r '.monitors.extra.ids' $dotconf

			elif [[ $1 == "indexes" ]]; then
				
				jq -r '.monitors.extra.indexes' $dotconf

			elif [[ -z $1 ]]; then
				
				jq .monitors.extra $dotconf
				
			else
				echo -e "error: invalid option\noptions:\n	ids\n	indexes"
				exit 1
			fi
		elif [ $1 = "all" ]; then
			shift 1
			if [ $1 = "ids" ]; then
				jq -r '.monitors.all.ids' $dotconf
			elif [ $1 = "indexes" ]; then
				jq -r '.monitors.all.indexes' $dotconf
			elif [ -z $1 ]; then	
				jq -r '.monitors.all' $dotconf
			else
				echo -e "'$1' is an invalid input. Valid inputs:\n	ids\n	indexes"
			fi
		elif [ -z $1 ]; then

			jq .monitors $dotconf

		else
			# TODO: Write invalid option for here
			exit 1
		fi

	elif [[ $1 == "info" ]]; then

		shift 1
		local name=$1

		# Fix for names with dots in them. Set the variable with the . in them to a variable for jq, and then use jq's version to continue the command
		
		local name_output=$(jq --arg n "$name" '.info[$n]' $dotconf)

		# Check if jq found "name"
		if [[ ! $name_output == "null" ]]; then
			# jq found variables for "name"

			# Check if var exists
			if [[ -n $2 ]]; then

				local var_output=$(jq --arg n "$name" --arg two "$2" '.info[$n].[$two]' $dotconf)

				if [[ ! $var_output == "null" ]]; then
					echo $var_output

				else
					echo -e "error: Possible spelling mistake; value '.info.$name.$2' doesn't exist"
					exit 1
				fi

			elif [[ -z $2 ]]; then

				echo $name_output

			else
				echo -e "error: Possible spelling mistake; value '.info.$var' doesn't exist"
				exit 1
			fi
		else
			# JQ didn't find any value, so throw error

			echo -e "info for '$1' doesn't exist.\nCheck for spelling errors."
			exit 1
		fi

	elif [[ -z $1 ]]; then

		jq . $dotconf

	else
		echo "
Invalid option: $1
options: 
	monitors - get information on monitors
	info - get information on a variable set for certain .dotter
"
		exit 1
	fi
	return 0
}

# A combination of set and get; sets if get fails.
# Also allows for a custom string prompt
dotter_request() {
    if [[ $# -lt 2 ]]; then
        echo "Error: Invalid number of arguments."
				echo "Usage: dotter_request (monitors/info) (name) (variable) [--string='custom prompt']"
        echo "       OR"
				echo "       dotter_request (monitors/info) (variable) [--string='custom prompt']"
        exit 1
    fi

    local type=$1
    local name=$2
    local variable=$3
		shift 3
    local custom_prompt="$*"
    # Parse --string option
		custom_prompt=${custom_prompt#--string=*}
		# Remove single quotes
		custom_prompt=${custom_prompt//\'/}

    if [[ $type == "monitors" ]]; then
        # Check if monitors are already set
        local monitors_set=$(jq -e '.monitors' "$dotconf" 2>/dev/null)
        if [[ $? -ne 0 || "$monitors_set" == "null" ]]; then
            dotter_set monitors
        else
            # If monitors are set, just get the requested value
            dotter_get monitors "$name" "$variable"
        fi

    elif [[ $type == "info" ]]; then
        # Check if the requested info exists
			local info_value=$(jq -e ".info.\"$name\".\"$variable\"" "$dotconf" 2>/dev/null)
        if [[ $? -ne 0 || "$info_value" == "null" ]]; then
            # If the info doesn't exist, prompt the user to set it
            if [[ -z "$custom_prompt" ]]; then
                custom_prompt="Enter value for .info.$name.$variable: "
            fi
            read -p "$custom_prompt" value
            dotter_set info "$name" "$variable" "$value"
        else
            # If the info exists, just get the value
            dotter_get info "$name" "$variable"
        fi

    else
			# TODO: Fix error messages
        echo "Error: Invalid type. Available options: monitors, info"
        exit 1
    fi
}


########
# Test #
########

# For testing functions

# Args: rest of them; $@
# Ideally the arg should be a function name
_test () {
	decho "Rest of args: $@\n"
	case $1 in
		wormer) shift ; wormer $@ ;;
		dot_add) shift ; dot_add $@ ;;
		**) echo "'$1' isn't set, or cannot be, or doesn't exist"; exit 1 ;;
	esac

}
#############
# Arguments #
#############

# Section for functions that do arguments

# Expects all arguments (unstringed)
main_arguments () {
	case $1 in
		get) shift ; dotter_get $@ ;;
		set) shift ; dotter_set $@ ;;
		reload) shift ; dotter_reload $@ ;;
		request) shift ; dotter_request $@ ;;
		install) shift ; dotter_install $@ ;;
		test) shift ; _test $@ ;;
		setup) shift ; dotter_setup $@ ;;

		# Arguments that have their own function
		do) shift ; do_arguments $@ ;;
		kill) shift ; kill_arguments $@ ;;
		dots) shift ; dots_arguments $@ ;;
		add) shift ; add_arguments $@ ;;
		config) shift ; config_arguments $@ ;;
		**) _help ;;
	esac
}

do_arguments () {
	case $1 in
		requests) shift ; dotter_do_requests $@	;;
		parents) shift ; dotter_do_parents $@ ;;
		cmds) shift ; dotter_do_cmds $@ ;;
		**) do_help ; exit 1 ;;
	esac
}

# TODO:
do_help () {
	continue
}

kill_arguments () {
	case $1 in
		parents) shift ; kill_parents $@ ;;
		**) kill_help $@ ; exit 1 ;;
	esac
}

kill_help () {
	test	
}

dots_arguments () {
	case $1 in 
		update) shift ; dots_update $@ ;;
		template) shift ; dots_template $@ ;;
		**) dots_help $@ ; exit 1 ;;
	esac
}
dots_help () {
	test
}

config_arguments () {
	case $1 in
		reset) shift ; dotter_config_reset $@ ;;
		**) config_help $@ ; exit 1 ;;
	esac
}

add_arguments () {
	case $1 in
		config) shift ; dotter_add_config $@ ;;
		bin) shift ; dotter_add_bin $@ ;;
		**) add_help $@ ; exit 1 ;;
	esac
}

config_help () {
	test
}

add_help () {
	echo "Help is not added yet"
}

########
# Main #
########

# Main part
main_arguments $@
